#!/bin/zsh

# ------------------------------ LOAD AND DEFINE FUNCTIONS ------------------------------

autoload zmv
setopt extended_glob
calc(){ awk "BEGIN { print "$*" }"  }

# ------------------------------ PROGRAM VARIABLES ------------------------------

DIM='\033[2m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# ------------------------------ PROGRAM FLAGS ------------------------------

echo ""
echo -e "${GREEN}Working....\n${NC}"

# Catch passed options
unset options
PASSED_OPTS=0
while getopts ":aAcCderRtT" options
    do
        case $options in
            c)
                ((PASSED_OPTS++))
                log_conflicts=1
                echo -e "${BLUE}Log Short onflicts: On${NC}"
            ;;
            C)
                ((PASSED_OPTS++))
                log_full_cOnflicts=1
                echo -e "${BLUE}Log Full COnflicts: On${NC}"
            ;;
            d)
                ((PASSED_OPTS++))
                log_delete=1
                echo -e "${BLUE}Log Deleting: On${NC}"
            ;;
            e)
                ((PASSED_OPTS++))
                log_empty=1
                echo -e "${BLUE}Log Empty Folders: On${NC}"
            ;;
            r)
                ((PASSED_OPTS++))
                log_rename=1
                echo -e "${BLUE}Log Short Renaming: On${NC}"
            ;;
            R)
                ((PASSED_OPTS++))
                log_full_rename=1
                echo -e "${BLUE}Log Full Renaming: On${NC}"
            ;;
            t)
                test_mode=1
                log_conflicts=1
                log_delete=1
                log_empty=1
                log_rename=1
                echo -e "${BLUE}Test Mode${NC}: On - ${DIM}Nothing will happen${NC}"
            ;;
            T)
                test_mode=1
                log_full_conflicts=1
                log_delete=1
                log_empty=1
                log_full_rename=1
                echo -e "${BLUE}Full Test Mode${NC}: On - ${DIM}Nothing will happen${NC}"
            ;;
            a)
                log_conflicts=1
                log_delete=1
                log_empty=1
                log_rename=1
                echo -e "${BLUE}All Short Mode${NC}: On - ${DIM}All Modes Enabled${NC}"
                echo -e "${BLUE}Log Short Conflicts: On${NC}"
                echo -e "${BLUE}Log Deleting: On${NC}"
                echo -e "${BLUE}Log Empty Folders: On${NC}"
                echo -e "${BLUE}Log Short Renaming: On${NC}"
            ;;
            A)
                log_full_conflicts=1
                log_delete=1
                log_empty=1
                log_full_rename=1
                echo -e "${BLUE}All Full Mode${NC}: On - ${DIM}All Modes Enabled${NC}"
                echo -e "${BLUE}Log Full Conflicts: On${NC}"
                echo -e "${BLUE}Log Deleting: On${NC}"
                echo -e "${BLUE}Log Empty Folders: On${NC}"
                echo -e "${BLUE}Log Full Renaming: On${NC}"
            ;;
            *)
                no_flags=1
            ;;
        esac
    done

# If no options
if [ -z $options ]; then no_flags=1; fi
# If Test Mode
if [ ! -z $test_mode ]; then PASSED_OPTS=0; fi
# If any mode enabled
if [ ! -z $log_conflicts ] || [ ! -z $log_fulL_conflicts ] || [ ! -z $log_delete ] || [ ! -z $log_empty ] || [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then
    echo -e "${DIM}-----------------------------${NC}"
fi

# Total Directories
total=`ls -A1hF | grep / | wc -l | tr -d " "`
echo "${BLUE}Total Directories: ${GREEN}${total}${NC}"
echo -e "${DIM}-----------------------------\n${NC}"

# Remove quotes from folders and their contents
# (convert 's to is and delete single '.)
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne "\rLooking for 's\033[K"; fi
if [ -z $test_mode ]; then
    zmv '(**/)(*)' "\$1\${2//\\'s/ is}"
else
    zmv -n '(**/)(*)' "\$1\${2//\\'s/ is}"
fi
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne "\rLooking for '\033[K"; fi
if [ -z $test_mode ]; then
    zmv '(**/)(*)' "\$1\${2//\\'/}"
else
    zmv -n '(**/)(*)' "\$1\${2//\\'/}"
fi

# Remove garbage
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rLooking for [YTS.AG]\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[YTS.AG]/}'
else
    zmv -n '(*)' '${1/\[YTS.AG]/}'
fi
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rLooking for [3D]\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[3D]/3D}'
else
    zmv -n '(*)' '${1/\[3D]/3D}'
fi
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rLooking for [HSBS]\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[HSBS]/}'
else
    zmv -n '(*)' '${1/\[HSBS]/}'
fi
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rLooking for [SBS]\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[SBS]/}'
else
    zmv -n '(*)' '${1/\[SBS]/}'
fi
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rLooking for ends with spaces\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/[ ](#c,)(#e)/}'
else
    zmv -n '(*)' '${1/[ ](#c,)(#e)/}'
fi

# Rename the 1080p Movies
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rSetting up [1080p]\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[[0-1][4-9][0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[1080p]}'
else
    zmv -n '(*)' '${1/\[[0-1][4-9][0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[1080p]}'
fi

# If they dont have any quality flag but end with 3D then they probably are 1080p
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rSetting up [1080p] on folders that end with 3D\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/3D(#e)/3D [1080p]}'
else
    zmv -n '(*)' '${1/3D(#e)/3D [1080p]}'
fi
# Temp folder to isolate the 3D movies
mkdir temp
# Put all 3D movies temporarily in temp/
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rTransfering 3D folders to temp\033[K'; fi
find . -type d -name '*3D*' | xargs -I {}  mv {}  ./temp/
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rDone Transfering\033[K'; fi
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rWaiting...\033[K'; fi
sleep 7
cd temp
# If no 3D movies in temp then get out of temp and continue
if [ "$(ls -A1hF)" ]
then
    # 3D is part of the name so it always goes before the year
    if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rSetting up 3D tag before the year\033[K'; fi
    if [ -z $test_mode ]; then
        zmv '(*)(\([0-9](#c,)\))(*)' '${1/3D[ ]/}3D ${2}${3/3D[ ]/}'
    else
        zmv -n '(*)(\([0-9](#c,)\))(*)' '${1/3D[ ]/}3D ${2}${3/3D[ ]/}'
    fi
    if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rLooking for duplicate 3D flag\033[K'; fi
    if [ -z $test_mode ]; then
        zmv '(*)' '${1/3D[ ]3D[ ]/3D }'
    else
        zmv -n '(*)' '${1/3D[ ]3D[ ]/3D }'
    fi
    mv ./* ..
    cd ..
else
    cd ..
fi

# Rename the 720p Movies
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rSetting up [7200p]\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[[0-1][1-3][0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[720p]}'
else
    zmv -n '(*)' '${1/\[[0-1][1-3][0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[720p]}'
fi

# Rename the SD Movies
# First from 1000 to 1099 pixels
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rSetting up [SD] - Part 1\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[[0-1]0[0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[SD]}'
else
    zmv -n '(*)' '${1/\[[0-1]0[0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[SD]}'
fi
# And then from 0 to 999 pixels
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rSetting up [SD] - Part 2\033[K'; fi
if [ -z $test_mode ]; then
    zmv '(*)' '${1/\[[0-9][0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[SD]}'
else
    zmv -n '(*)' '${1/\[[0-9][0-9][0-9][a-zA-z](#c,)x[0-9](#c,)[a-zA-z](#c,)]/[SD]}'
fi

# Make sure everything has completed
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rWaiting...\033[K'; fi
sleep 7
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -ne '\rDeleting temp folder\033[K'; fi
rm -rf ./temp
if [ ! -z $log_rename ] || [ ! -z $log_full_rename ]; then echo -e '\rFolders Renaming Done!\n'; fi

# Folder iteration counter
counter=1
for folder in */; do

    if [ ! -z $no_flags ]; then
        percent=$((100*$counter/$total))
        echo -ne "\r${GREEN}${percent}%${NC} Complete\033[K"
        ((counter++))
    fi

    # ------------------------------ FOLDER VARIABLES ------------------------------

    foldername=`basename -- "${folder}"`

    cd "${folder}"

    # ------------------------------ FOLDER VARIABLES AND COUNTERS ------------------------------

    # Total Items in folder
    items=`ls -1 | wc -l`

    # Subtitles in folder
    subs=`find -E . -regex '.*\.(srt|sub)' -mindepth 1 -type f | wc -l | tr -d " "`
    srt=`find -E . -name '*.srt*' -mindepth 1 -type f | wc -l | tr -d " "`
    sub=`find -E . -name '*.sub*' -mindepth 1 -type f | wc -l | tr -d " "`

    # Videos in folder
    vids=`find -E . -regex '.*\.(mp4|avi|mkv|mov)' -mindepth 1 -type f | wc -l | tr -d " "`
    mp4=`find -E . -name '*.mp4*' -mindepth 1 -type f | wc -l | tr -d " "`
    avi=`find -E . -name '*.avi*' -mindepth 1 -type f | wc -l | tr -d " "`
    mkv=`find -E . -name '*.mkv*' -mindepth 1 -type f | wc -l | tr -d " "`
    mov=`find -E . -name '*.mov*' -mindepth 1 -type f | wc -l | tr -d " "`

    # If log_delete AND alone - Show Folder and Progress
    if [ ! -z $log_delete ] && [ "$PASSED_OPTS" -eq 1 ]; then
        percent=$((100*$counter/$total))
        echo -ne "\r${RED}${percent}%${NC} - ${DIM}${foldername}:${NC}${RED}${GREEN}${DIM} CLEANED${NC}\033[K"
        ((counter++))
    else
        # Else if log_delete NOT alone - Show Folders
        if [ ! -z $log_delete ]; then echo -e "${DIM}${foldername}:${NC} ${RED}${GREEN}${DIM} CLEANED${NC}"; fi
    fi
    # If NOT test_mode - Remove Unwanted Files
    if [ -z $test_mode ]; then find -E . -regex '.*\.(DS_Store|jpg|png|gif|bmp)' -mindepth 1 -type f -delete; fi

    # If folder NOT empty
    if [ $items -gt 0 ]; then
        # If there are no duplicate file extensions in the directory
        if [ "$srt" -le 1 ] && [ "$sub" -le 1 ] && [ "$mp4" -le 1 ] && [ "$avi" -le 1 ] && [ "$mkv" -le 1 ] && [ "$mov" -le 1 ]; then

            # If log_full_rename - Full log

            if [ ! -z $log_full_rename ]; then
                echo -e "${ORANGE}$foldername${NC}"
                echo -e $(zmv -n '(*)(.*)' '${foldername}$2' | sed -e "s/mv -- /\\\033[2m/g" -e "s/\' \'/ ----> /g" -e "s/$/\\\n\\\033[0m/g" -e "s/\'//g")

                # If not test_mode - Rename
                if [ -z $test_mode ]; then
                    zmv '(*)(.*)' '${foldername}$2'
                fi
            else
                # If log_rename - Short log
                if [ ! -z $log_rename ]; then
                    echo -e "${ORANGE}$foldername:${NC} ${GREEN}${DIM}RENAMED${NC}"
                    # If not test_mode - Rename
                    if [ -z $test_mode ]; then
                        zmv '(*)(.*)' '${foldername}$2'
                    fi
                else
                    # ------------------------------ ELSE IF SUCCESS AND FULL SUCCESS ARE NOT 1 - DONT LOG & RENAME ------------------------------
                    zmv -n '(*)(.*)' '${foldername}$2'
                fi
            fi
        else
            if [ ! -z $log_full_conflicts ]; then
                echo -e "${BLUE}${DIM}${foldername}:${NC} ${RED} conflict${NC}"
                if [ "$srt" -gt 1 ] || [ "$sub" -gt 1 ]; then
                    echo -e "${DIM}-${NC} ${ORANGE}Subtitles:${NC} ${RED}${subs}${NC}"
                    if [ "$srt" -gt 1 ]; then
                        echo -e "${DIM}--${NC} ${BLUE}srt:${NC} ${RED}${srt}${NC}"
                    fi
                    if [ "$sub" -gt 1 ]; then
                        echo -e "${DIM}--${NC} ${BLUE}sub:${NC} ${RED}${sub}${NC}"
                    fi
                fi
                if [ "$mp4" -gt 1 ] || [ "$avi" -gt 1 ] || [ "$mkv" -gt 1 ] || [ "$mov" -gt 1 ]; then
                    echo -e "${DIM}-${NC} ${ORANGE}Videos:${NC} ${RED}${vids}${NC}"
                    if [ "$mp4" -gt 1 ]; then
                        echo -e "${DIM}--${NC} ${BLUE}mp4:${NC} ${RED}${mp4}${NC}"
                    fi
                    if [ "$avi" -gt 1 ]; then
                        echo -e "${DIM}--${NC} ${BLUE}avi:${NC} ${RED}${avi}${NC}"
                    fi
                    if [ "$mkv" -gt 1 ]; then
                        echo -e "${DIM}--${NC} ${BLUE}mkv:${NC} ${RED}${mkv}${NC}"
                    fi
                    if [ "$mov" -gt 1 ]; then
                        echo -e "${DIM}--${NC} ${BLUE}mov:${NC} ${RED}${mov}${NC}"
                    fi
                fi
            else
                if [ ! -z $log_conflicts ]; then
                    echo -e "${BLUE}${DIM}${foldername}:${NC} ${RED} conflict${NC}"
                fi
            fi
        fi
    else
        if [ ! -z $log_empty ]; then
            echo "${BLUE}${foldername}:${NC} ${RED} empty${NC}"
        fi
    fi
    cd ..
done